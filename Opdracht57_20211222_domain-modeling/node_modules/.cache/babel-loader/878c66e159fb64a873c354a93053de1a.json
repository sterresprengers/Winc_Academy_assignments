{"ast":null,"code":"import { names } from \"./names\"; // Not including \"to\"\n\nconst getRandomInteger = (from, to) => from + Math.floor(Math.random() * to);\n\nconst getRandomItem = arr => arr[Math.floor(Math.random() * arr.length)]; // Generate n items with func\n\n\nconst generateNItems = (num, func) => Array(num).fill(0).map(func);\n\nconst getRandomPerson = () => getRandomItem(names);\n\nconst getRandomFirstName = () => getRandomPerson().name;\n\nconst getRandomSurname = () => getRandomPerson().surname;\n\nconst getRandomId = () => getRandomInteger(1, 1000000);\n\nconst getRandomDomain = () => getRandomItem([\"gmail.com\", \"hotmail.com\", \"yahoo.com\", \"live.com\", \"mail.com\", \"me.com\"]);\n\nconst getRandomPhone = () => `06-${getRandomInteger(10000000, 10000000)}`;\n\nconst getRandomTime = () => getRandomInteger(8, 19);\n\nconst getRandomDay = () => getRandomInteger(1, 28);\n\nconst generatePerson = () => ({\n  name: getRandomFirstName(),\n  surname: getRandomSurname(),\n  phone: getRandomPhone(),\n  id: getRandomId()\n});\n\nconst namesToEmailPart = ({\n  name,\n  surname\n}) => `${name.toLowerCase()}.${surname.toLowerCase()}`.replace(\" \", \"\");\n\nconst formatEmployeeEmail = ({\n  name,\n  surname\n}) => namesToEmailPart({\n  name,\n  surname\n}) + `@tandartspraktijkbvt.nl`;\n\nconst generateEmployee = () => {\n  const person = generatePerson();\n  return { ...person,\n    ...{\n      email: formatEmployeeEmail(person)\n    }\n  };\n};\n\nconst generatePatient = () => {\n  const person = generatePerson();\n  return { ...person,\n    ...{\n      email: namesToEmailPart(person) + getRandomDomain(),\n      birthYear: getRandomInteger(1935, 2020)\n    }\n  };\n};\n\nconst generateRandomAppointment = ({\n  dentists,\n  assistants,\n  patients\n}) => {\n  const appointment = {\n    id: getRandomId(),\n    dentist: getRandomItem(dentists).id,\n    patient: getRandomItem(patients).id,\n    day: getRandomDay(),\n    time: getRandomTime()\n  };\n  if (getRandomInteger(0, 2) === 1) appointment.assistant = getRandomItem(assistants).id;\n  return appointment;\n};\n\nconst generateRandomAppointments = (people, num_appointments) => generateNItems(num_appointments, () => generateRandomAppointment(people));\n\nconst getInitialState = () => {\n  const NUM_DENTISTS = 4;\n  const NUM_ASSISTANTS = 2;\n  const NUM_PATIENTS = 50;\n  const NUM_APPOINTMENTS = 10;\n  const people = {\n    dentists: generateNItems(NUM_DENTISTS, generateEmployee),\n    patients: generateNItems(NUM_PATIENTS, generatePatient),\n    assistants: generateNItems(NUM_ASSISTANTS, generateEmployee)\n  };\n  const appointments = generateRandomAppointments(people, NUM_APPOINTMENTS);\n  return { ...people,\n    ...{\n      appointments\n    }\n  };\n};\n\nexport default getInitialState; // const getRandomName = () => {\n//   const person = names[Math.floor(Math.random() * 250)];\n//   return `${person.name} ${person.surname}`;\n// };\n// const getRandomTime = () => {\n//   let hour;\n//   while (true) {\n//     hour = Math.floor(Math.random() * 24);\n//     if (hour > 7 && hour < 19) {\n//       return hour;\n//     }\n//   }\n// };\n// const getRandomDay = () => Math.floor(Math.random() * 28) + 1;\n// const generateRandomAppointment = () => ({\n//   day: getRandomDay(),\n//   time: getRandomTime(),\n//   patient: getRandomName(),\n//   dentist: getRandomName(),\n//   assistant: getRandomName(),\n// });\n// const generateRandomAppointments = num =>\n//   Array(num)\n//     .fill(0)\n//     .map(_ => generateRandomAppointment());\n// export default generateRandomAppointments;","map":{"version":3,"sources":["/Users/sterresprengers/Desktop/Winc_Academy_assignments/Opdracht57_20211222_domain-modeling/src/data.js"],"names":["names","getRandomInteger","from","to","Math","floor","random","getRandomItem","arr","length","generateNItems","num","func","Array","fill","map","getRandomPerson","getRandomFirstName","name","getRandomSurname","surname","getRandomId","getRandomDomain","getRandomPhone","getRandomTime","getRandomDay","generatePerson","phone","id","namesToEmailPart","toLowerCase","replace","formatEmployeeEmail","generateEmployee","person","email","generatePatient","birthYear","generateRandomAppointment","dentists","assistants","patients","appointment","dentist","patient","day","time","assistant","generateRandomAppointments","people","num_appointments","getInitialState","NUM_DENTISTS","NUM_ASSISTANTS","NUM_PATIENTS","NUM_APPOINTMENTS","appointments"],"mappings":"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","sourcesContent":["\nimport { names } from \"./names\";\n\n// Not including \"to\"\nconst getRandomInteger = (from, to) => from + Math.floor(Math.random() * to);\n\nconst getRandomItem = arr => arr[Math.floor(Math.random() * arr.length)];\n\n// Generate n items with func\nconst generateNItems = (num, func) => Array(num).fill(0).map(func);\n\nconst getRandomPerson = () => getRandomItem(names);\n\nconst getRandomFirstName = () => getRandomPerson().name;\n\nconst getRandomSurname = () => getRandomPerson().surname;\n\nconst getRandomId = () => getRandomInteger(1, 1000000);\n\nconst getRandomDomain = () =>\n  getRandomItem([\n    \"gmail.com\",\n    \"hotmail.com\",\n    \"yahoo.com\",\n    \"live.com\",\n    \"mail.com\",\n    \"me.com\",\n  ]);\n\nconst getRandomPhone = () => `06-${getRandomInteger(10000000, 10000000)}`;\n\nconst getRandomTime = () => getRandomInteger(8, 19);\n\nconst getRandomDay = () => getRandomInteger(1, 28);\n\nconst generatePerson = () => ({\n  name: getRandomFirstName(),\n  surname: getRandomSurname(),\n  phone: getRandomPhone(),\n  id: getRandomId(),\n});\n\nconst namesToEmailPart = ({ name, surname }) =>\n  `${name.toLowerCase()}.${surname.toLowerCase()}`.replace(\" \", \"\");\n\nconst formatEmployeeEmail = ({ name, surname }) =>\n  namesToEmailPart({ name, surname }) + `@tandartspraktijkbvt.nl`;\n\nconst generateEmployee = () => {\n  const person = generatePerson();\n  return { ...person, ...{ email: formatEmployeeEmail(person) } };\n};\n\nconst generatePatient = () => {\n  const person = generatePerson();\n  return {\n    ...person,\n    ...{\n      email: namesToEmailPart(person) + getRandomDomain(),\n      birthYear: getRandomInteger(1935, 2020),\n    },\n  };\n};\n\nconst generateRandomAppointment = ({ dentists, assistants, patients }) => {\n  const appointment = {\n    id: getRandomId(),\n    dentist: getRandomItem(dentists).id,\n    patient: getRandomItem(patients).id,\n    day: getRandomDay(),\n    time: getRandomTime(),\n  };\n\n  if (getRandomInteger(0, 2) === 1)\n    appointment.assistant = getRandomItem(assistants).id;\n\n  return appointment;\n};\n\nconst generateRandomAppointments = (people, num_appointments) =>\n  generateNItems(num_appointments, () => generateRandomAppointment(people));\n\nconst getInitialState = () => {\n  const NUM_DENTISTS = 4;\n  const NUM_ASSISTANTS = 2;\n  const NUM_PATIENTS = 50;\n  const NUM_APPOINTMENTS = 10;\n  const people = {\n    dentists: generateNItems(NUM_DENTISTS, generateEmployee),\n    patients: generateNItems(NUM_PATIENTS, generatePatient),\n    assistants: generateNItems(NUM_ASSISTANTS, generateEmployee),\n  };\n  const appointments = generateRandomAppointments(people, NUM_APPOINTMENTS);\n  return { ...people, ...{ appointments } };\n};\n\nexport default getInitialState;\n\n// const getRandomName = () => {\n//   const person = names[Math.floor(Math.random() * 250)];\n//   return `${person.name} ${person.surname}`;\n// };\n\n// const getRandomTime = () => {\n//   let hour;\n//   while (true) {\n//     hour = Math.floor(Math.random() * 24);\n//     if (hour > 7 && hour < 19) {\n//       return hour;\n//     }\n//   }\n// };\n\n// const getRandomDay = () => Math.floor(Math.random() * 28) + 1;\n\n// const generateRandomAppointment = () => ({\n//   day: getRandomDay(),\n//   time: getRandomTime(),\n//   patient: getRandomName(),\n//   dentist: getRandomName(),\n//   assistant: getRandomName(),\n// });\n\n// const generateRandomAppointments = num =>\n//   Array(num)\n//     .fill(0)\n//     .map(_ => generateRandomAppointment());\n\n// export default generateRandomAppointments;\n"]},"metadata":{},"sourceType":"module"}